using System;
using System.IO;
using System.Data;
using System.Web;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using IP_Help.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using SendGrid;
using SendGrid.Helpers.Mail;
using CsvHelper;
using Newtonsoft.Json;
using Newtonsoft;
using System.Collections.Generic;

namespace IP_Help.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    public class Forms : Controller
    {
        private readonly UserManager<ApplicationUser> _userManager;
        public Forms(UserManager<ApplicationUser> userManager)
        {
            _userManager = userManager;
        }

        [HttpPost("[action]")]
        public async Task PCOrder(PCOrder model)
        {
            var submittedby = _userManager.GetUserName(HttpContext.User);
            var apiKey = Environment.GetEnvironmentVariable("sendgrid");
            var client = new SendGridClient(apiKey);
            var headers = "{'X-OTRS-DynamicField-BulkOrderCount': '1', 'X-OTRS-Type': 'Single'}";
            var headersSerial = JsonConvert.DeserializeObject<Dictionary<string, string>>(headers);
            var msg = new SendGridMessage()
            {
                From = new EmailAddress(submittedby, "I&P Help"),
                Subject = "Request for new PC",
                Headers = headersSerial,
                PlainTextContent = 
                    String.Format
                    ("<strong> A new PC request has been submitted.</strong><br><br><strong> Customer: </strong><br> {0} <br><br><strong> Customer's phone number: </strong><br> {1} <br><br><strong> Department: </strong><br> {2} <br><br><strong> Machine type: </strong><br> {3} <br><br><strong> Recipient's name: </strong><br> {4} <br><br><strong> Recipient's network ID: </strong><br> {5} <br><br><strong> Recipients building: </strong><br> {6} <br><br><strong> Recipients floor: </strong><br> {15} <br><br><strong> Accessories </strong><br> {13} <br><br><strong> Non-standard software applications </strong><br> {14} <br><br><strong> New employee, or existing staff member: </strong><br> {7} <br><br><i> If new employee </i> <br><br><strong> Permanent employee, or intern: </strong><br> {8} <br><br><strong> Was a functioning computer plugged into the network port in the last month?: </strong><br> {9} <br><br><i> If existing employee </i> <br><br><strong> Recipients current computer number: </strong><br> {10} <br><br><strong> Is the recipients current computer functioning?: </strong><br> {11} <br><br><strong> OTRS ticket number associated with replacement: </strong><br> {12} <br><br><br><strong> This message was automatically generated by the system.  Do not reply.</strong>",
                            submittedby, // 0
                            model.CustomerPhone, // 1
                            model.Department, // 2
                            model.MachineType, // 3 
                            model.UserName, // 4
                            model.UserNetworkID, // 5
                            model.Building, // 6
                            model.EmploymentStatus, // 7
                            model.EmploymentType, // 8
                            model.PreviouslyFunctioning, // 9
                            model.ComputerNumber, // 10
                            model.ComputerFunctioning, // 11
                            model.OTRSTicket, // 12
                            model.AccessoriesRelay, // 13
                            model.SoftwareApplications, // 14
                            model.Floor), // 15
                HtmlContent = 
                String.Format
                ("<strong> A new PC request has been submitted.</strong><br><br><strong> Customer: </strong><br> {0} <br><br><strong> Customer's phone number: </strong><br> {1} <br><br><strong> Department: </strong><br> {2} <br><br><strong> Machine type: </strong><br> {3} <br><br><strong> Recipient's name: </strong><br> {4} <br><br><strong> Recipient's network ID: </strong><br> {5} <br><br><strong> Recipients building: </strong><br> {6} <br><br><strong> Recipients floor: </strong><br> {15} <br><br><strong> Accessories </strong><br> {13} <br><br><strong> Non-standard software applications </strong><br> {14} <br><br><strong> New employee, or existing staff member: </strong><br> {7} <br><br><i> If new employee </i> <br><br><strong> Permanent employee, or intern: </strong><br> {8} <br><br><strong> Was a functioning computer plugged into the network port in the last month?: </strong><br> {9} <br><br><i> If existing employee </i> <br><br><strong> Recipients current computer number: </strong><br> {10} <br><br><strong> Is the recipients current computer functioning?: </strong><br> {11} <br><br><strong> OTRS ticket number associated with replacement: </strong><br> {12} <br><br><br><strong> This message was automatically generated by the system.  Do not reply.</strong>",
                         submittedby, // 0
                         model.CustomerPhone, // 1
                         model.Department, // 2
                         model.MachineType, // 3 
                         model.UserName, // 4
                         model.UserNetworkID, // 5
                         model.Building, // 6
                         model.EmploymentStatus, // 7
                         model.EmploymentType, // 8
                         model.PreviouslyFunctioning, // 9
                         model.ComputerNumber, // 10
                         model.ComputerFunctioning, // 11
                         model.OTRSTicket, // 12
                         model.AccessoriesRelay, // 13
                         model.SoftwareApplications, // 14
                         model.Floor) // 15
            };
            msg.AddTo(new EmailAddress(submittedby, "Client"));
            var response = await client.SendEmailAsync(msg);
        }

        [HttpPost("[action]")]
        public async Task MobileDevice(MobileDevice model)
        {
            var submittedby = _userManager.GetUserName(HttpContext.User);
            var apiKey = Environment.GetEnvironmentVariable("sendgrid");
            var client = new SendGridClient(apiKey);
            var from = new EmailAddress(submittedby, "I&P Help");
            var subject = "Request for new mobile device";
            var to = new EmailAddress(submittedby, "Client");
            var plainTextContent = 
                String.Format
                ("<strong> A new mobile device request has been submitted.</strong><br><br><strong> Customer: </strong><br> {0} <br><br><strong> Device type: </strong><br> {1} <br><br><strong> New, or replacement: </strong><br> {2} <br><br><strong> Employee's name & title: </strong><br> {3} <br><br><strong> If new device, employee's job duties: </strong><br> {4} <br><br><strong> If replacement, reason for replacement: </strong><br> {5} <br><br><br><strong> This message was automatically generated by the system.  Do not reply.</strong>",
                         submittedby, // 0
                         model.DeviceType, // 1
                         model.NewReplacement, // 2
                         model.JobTitle, // 3
                         model.JobDuties, // 4
                         model.ReplacementExplanation); // 5
            var htmlContent = 
                String.Format
                ("<strong> A new mobile device request has been submitted.</strong><br><br><strong> Customer: </strong><br> {0} <br><br><strong> Device type: </strong><br> {1} <br><br><strong> New, or replacement: </strong><br> {2} <br><br><strong> Employee's name & title: </strong><br> {3} <br><br><strong> If new device, employee's job duties: </strong><br> {4} <br><br><strong> If replacement, reason for replacement: </strong><br> {5} <br><br><br><strong> This message was automatically generated by the system.  Do not reply.</strong>",
                         submittedby, // 0
                         model.DeviceType, // 1
                         model.NewReplacement, // 2
                         model.JobTitle, // 3
                         model.JobDuties, // 4
                         model.ReplacementExplanation); // 5
            var msg = MailHelper.CreateSingleEmail(from, to, subject, plainTextContent, htmlContent);
            var response = await client.SendEmailAsync(msg);
        }

        [HttpPost("[action]")]
        public async Task NetworkRegistration(NetworkReg model)
        {
            using (TextWriter writer = new StreamWriter("netreg.csv"))
            {
                var record = model;
                var csv = new CsvWriter( writer );
                csv.WriteHeader<NetworkReg>();
                csv.NextRecord();
                csv.WriteRecord( record );
                csv.NextRecord();
            }
            var submittedby = _userManager.GetUserName(HttpContext.User);
            var apiKey = Environment.GetEnvironmentVariable("sendgrid");
            var client = new SendGridClient(apiKey);
            var from = new EmailAddress(submittedby, "I&P Help");
            var subject = 
                String.Format
                ("New network account request for {0} {1}",
                    model.FirstName, // 0
                    model.LastName); // 1
            var to = new EmailAddress(submittedby, "Client");
            var plainTextContent = 
                String.Format
                ("User System/NetworkRegistration <br><br><strong> A new network registration request has been submitted.</strong><br><br><strong> Employee's first name: </strong><br> {0} <br><br><strong> Employee's last name: </strong><br> {1} <br><br><strong> Employment type: </strong><br> {2} <br><br><strong> Start date: </strong><br> {3} <br><br><strong> Employee ID: </strong><br> {4} <br><br><strong> Department: </strong><br> {5} <br><br><strong> Division: </strong><br> {6} <br><br><strong> Job title: </strong><br> {7} <br><br><strong> Email distribution lists: </strong><br> {8} <br><br><strong> End date, if applicable: </strong><br> {9} <br><br><strong> Address: </strong><br> {10} <br><br><strong> Room: </strong><br> {11} <br><br><strong> City: </strong><br> {12} <br><br><strong> State: </strong><br> {13} <br><br><strong> Zipcode: </strong><br> {14} <br><br><strong> Telephone: </strong><br> {15} <br><br><strong> Fax: </strong><br> {16} <br><br><strong> Comments: </strong><br> {17} <br><br><strong> This message was automatically generated by the system.  Do not reply.</strong>",
                        model.FirstName, // 0
                        model.LastName, // 1
                        model.EmploymentType, // 2
                        model.StartDate, // 3
                        model.EmployeeID, // 4
                        model.Department, // 5
                        model.Division, // 6
                        model.JobTitle, // 7
                        model.EmailDistribution, // 8
                        model.EndDate, // 9
                        model.Address, // 10
                        model.Room, // 11
                        model.City, // 12
                        model.State, // 13
                        model.Zip, // 14
                        model.Telephone, // 15
                        model.Fax, // 16
                        model.Comments); // 17
            var htmlContent =
                String.Format
                ("User System/NetworkRegistration <br><br><strong> A new network registration request has been submitted.</strong><br><br><strong> Employee's first name: </strong><br> {0} <br><br><strong> Employee's last name: </strong><br> {1} <br><br><strong> Employment type: </strong><br> {2} <br><br><strong> Start date: </strong><br> {3} <br><br><strong> Employee ID: </strong><br> {4} <br><br><strong> Department: </strong><br> {5} <br><br><strong> Division: </strong><br> {6} <br><br><strong> Job title: </strong><br> {7} <br><br><strong> Email distribution lists: </strong><br> {8} <br><br><strong> End date, if applicable: </strong><br> {9} <br><br><strong> Address: </strong><br> {10} <br><br><strong> Room: </strong><br> {11} <br><br><strong> City: </strong><br> {12} <br><br><strong> State: </strong><br> {13} <br><br><strong> Zipcode: </strong><br> {14} <br><br><strong> Telephone: </strong><br> {15} <br><br><strong> Fax: </strong><br> {16} <br><br><strong> Comments: </strong><br> {17} <br><br><strong> This message was automatically generated by the system.  Do not reply.</strong>",
                        model.FirstName, // 0
                        model.LastName, // 1
                        model.EmploymentType, // 2
                        model.StartDate, // 3
                        model.EmployeeID, // 4
                        model.Department, // 5
                        model.Division, // 6
                        model.JobTitle, // 7
                        model.EmailDistribution, // 8
                        model.EndDate, // 9
                        model.Address, // 10
                        model.Room, // 11
                        model.City, // 12
                        model.State, // 13
                        model.Zip, // 14
                        model.Telephone, // 15
                        model.Fax, // 16
                        model.Comments); // 17
            var msg = MailHelper.CreateSingleEmail(from, to, subject, plainTextContent, htmlContent);
            var bytes = System.IO.File.ReadAllBytes("netreg.csv");
            var file = Convert.ToBase64String(bytes);
            msg.AddAttachment("netreg.csv", file);
            var response = await client.SendEmailAsync(msg);
        }

        [HttpPost("[action]")]
        public async Task Other(Other model)
        {
            var submittedby = _userManager.GetUserName(HttpContext.User);
            var apiKey = Environment.GetEnvironmentVariable("sendgrid");
            var client = new SendGridClient(apiKey);
            var from = new EmailAddress(submittedby, "I&P Help");
            var subject = "New ticket";
            var to = new EmailAddress(submittedby, "Client");
            var plainTextContent = 
                String.Format
                ("<strong> A new request has been submitted through the portal.</strong><br><br> {0} <br><br><br><strong> This message was automatically generated by the system.  Do not reply.</strong>",
                         model.Body); // 0
            var htmlContent = 
                String.Format
                ("<strong> A new request has been submitted through the portal.</strong><br><br><strong> Body: </strong><br> {0} <br><br><br><strong> This message was automatically generated by the system.  Do not reply.</strong>",
                         model.Body); // 0
            var msg = MailHelper.CreateSingleEmail(from, to, subject, plainTextContent, htmlContent);
            var response = await client.SendEmailAsync(msg);
        }
    }
}
